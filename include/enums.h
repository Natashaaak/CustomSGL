#pragma once
//---------------------------------------------------------------------------
// Data types
//---------------------------------------------------------------------------

/// Error codes
typedef enum {
  /// Operation succeeded
  SGL_NO_ERROR = 0,
  /// Invalid argument(s) to a call
  SGL_INVALID_VALUE,
  /// Invalid enum argument(s) to a call
  SGL_INVALID_ENUM,
  /// Invalid call (most typical: sglBegin after another sglBegin,
  /// state change inside sglBegin/sglEnd pair, no context defined)
  SGL_INVALID_OPERATION,
  /// Quota of internal resources exceeded (e.g. number of drawing contexts)
  SGL_OUT_OF_RESOURCES,
  /// Internal library error
  SGL_INTERNAL_ERROR,
  /// Matrix stack overflow. Generated by sglPushMatrix().
  SGL_STACK_OVERFLOW,
  /// Matrix stack underflow - trying to pop matrix when there is only one matrix left on the stack.
  /// Generated by sglPopMatrix().
  SGL_STACK_UNDERFLOW,
  /// Insufficient memory to finish the requested operation
  SGL_OUT_OF_MEMORY
} sglEErrorCode;

/// Types of graphic elements which are specified using the sglVertexXf command
typedef enum {
  /// Points
  SGL_POINTS = 1,
  /// Lines
  SGL_LINES,
  /// Line strip
  SGL_LINE_STRIP,
  /// Closed line strip
  SGL_LINE_LOOP,
  /// Triangle list
  SGL_TRIANGLES,
  /// General, non-convex polygon
  SGL_POLYGON,
  /// Area light - restricted to a quadrangle for simplicity
  SGL_AREA_LIGHT,
  SGL_LAST_ELEMENT_TYPE
} sglEElementType;

/// Bits indicating what to clear with sglClear()
typedef enum {
  /// Clear the color buffer
  SGL_COLOR_BUFFER_BIT = 0x0001,
  /// Clear the depth buffer
  SGL_DEPTH_BUFFER_BIT = 0x0002
} sglEClearBit;

/// Enum for selecting matrix stacks to work with. Passed to sglMatrixMode().
typedef enum {
  /// Modelview matrix
  SGL_MODELVIEW = 0,
  /// Projection matrix
  SGL_PROJECTION = 1
} sglEMatrixMode;

/// Enum for area fill modes. Passed to sglAreaMode().
typedef enum {
  /// Draw only vertices
  SGL_POINT = 0,
  /// Draw only borders of graphics elements (lines)
  SGL_LINE = 1,
  /// Draw filled elements, default.
  SGL_FILL = 2
} sglEAreaMode;

/// Enum for sglEnable() / sglDisable()
typedef enum {
  /// enable/disable depth test
  SGL_DEPTH_TEST = 1
} sglEEnableFlags;
